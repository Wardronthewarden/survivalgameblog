{
  "paragraphs": [
    {
      "id": 1,
      "body": "This week has marked the start of the procedural terrain system. So far, I have only managed to implement a system for generating one chunk by itself, and it still has a few unresolved bugs, even though I managed to sort out the more serious ones, relating to the terrain tiles' rotation, that made everything look wrong.\n\nIt unfortunately seems I am already behind schedule. I am hoping that some of the items on my schedule will take a lot less time than initially thought, so that I can finish my part by next Wednesday (a complete terrain system for one biome, foliage not included) hand the rest of the terrain system to my programmer and can get on with designing and implementing the combat system. However it seems I have massively underestimated the time this current system will take to implement.",
      "title": "Starting work on the chunk system",
      "dateAdded": "2023/2/18",
      "lastModified": "2023/2/18 1:46"
    },
    {
      "id": 2,
      "body": "IT WORKS!! It took my last remaining sanity, but I have managed to make the chunks for my terrain generation work without any bugs. At least none that I encountered so far. It took a lot longer than I expected, but the hardest part is done. \n\nFor the first time since I have started working on this system, I feel really excited to continue developing it. Next up, I will be working on spawning multiple chunks at the same time, and generating them seamlessly along the border. And once that part is done, I can make a build out of the game that I can send to testers, to test the limitations of this implementation.\n\nMy main concerns at the moment, are that unreal can't really handle this many instances of the terrain tiles, although supposedly nanite is very good at solving this exact problem. I am also looking to test how much building the game improves the performance of my terrain generation, and if I run any problems while compiling blueprints down to C++. Hopefully, I will have a clearer answer to most of these questions over the course of the next week.",
      "title": "Finishing the chunk",
      "dateAdded": "2023/2/19",
      "lastModified": "2023/2/19 3:9"
    },
    {
      "id": 3,
      "body": "My sanity has been truly put to the test. I have not posted in a while due to an issue with the blog app itself, so in a quick summary:\n\n-I have finished implementing terrain generation seamlessly using multiple chunks. It turned out to be extremely slow.\n\n-I started implementing new C++ classes to optimize the generation system. Unfortunately, due to some internal problem with unreal, my BP only project failed to compile all the changes when adding in C++ classes. This has lead to a total of 2 weeks of nothing but working out the issue.\n\n-After it was done, I implemented Multithreading into the game's blueprints, which did help a lot with performance.\n\nUnfortunately, both the chunk management system and the chunk generation still take a long time executing its function, so I will need to transfer a bit of the code into C++ to make the system a bit faster. I have started on the implementation today, and have learned a lot about Unreal's internal C++ scripting methods.",
      "title": "Blueprint to C++",
      "dateAdded": "2023/3/12",
      "lastModified": "2023/3/12 1:29"
    },
    {
      "id": 4,
      "body": "Today has been a fun day. I have started implementing a lot of what I have already done in Blueprints, into C++.\n\nThis has proven to be way more interesting, and surprisingly less challenging than I initially anticipated. I found a great tutorial series by (as far as I can tell) EpicGames themselves, and as a result, the terrain generation seems to be much faster!\n\nI'm going to have to try and implement as much of it as I can tomorrow. It looks like I'm already running out of time. At some point, I have to completely rewrite my schedule too.\n\nI have MASSIVELY underestimated the ttime it would take me to implement this system properly. But nothing to do now, but push forward.",
      "title": "First Day of BP to C++ migration",
      "dateAdded": "2023/3/12",
      "lastModified": "2023/3/12 1:29"
    },
    {
      "id": 5,
      "body": "Yet another long development period has passed.\n\nI have been trying to implement the rest of the world generation system in C++ to keep my blueprints more organized (and most importantly performant). I expected it to go a bit smoother, now that I had the base of the system implemented.\n\nhowever...\n\nIt turns out even a decision so as little as using a TMap instead of a TArray in my code would prove to be a giant hurdle. I have spent the better half of these past few weeks because of an issue I'm still not certain about why, but segfaulted when I tried to access a key in a TMap.\n\nThe solution in the end was to just use an Array instead of a Map, which is annoying, but at least the editor no longer crashes every time I generate the world.\n\nI will go on to work on adding a height map, and foliage to my terrain next week. The reason being, this will put the game into a state that looks good enough to produce marketing material from it, and the work needed to be handled for these could also further my knowledge and portfolio as a technical artist.",
      "title": "Finishing Blueprint to C++ migration",
      "dateAdded": "2023/3/26",
      "lastModified": "2023/3/26 11:27"
    },
    {
      "id": 6,
      "body": "This past onth of development finally made it all feel worthwhile.\n\nIt has been a long, tireing journey, but we have it 90% done. Tile based generation. Gradient noise. Generating and deleting chunks programmatically while the player moves around. Back-tracking for WFC. It is beautiful.\n\nTurns out it is much easier to program a system if you truly understand the language you're using, its compiler, and the engine. I set out to create this project to challenge myself, and push myself to learn more both about C++, and procedural generation algorythm. And challenge me it did, and I am really glad for it. I am much closer to where I want to be as a programmer, compared to when I was starting on the project. Not only am I much more comfortable implementing complex systems, I have a much better understanding of computer science in general, and I was even capable to debug my code based solely on my knowledge on the C++ compiler and pointers.\n\nI am still a bit sad that the combined implementation for the terrain generation will most likely only be finished to the degree show, but considering the challenges I was facing earlier in development, I am happy with what I managed to achieve in this time.",
      "dateAdded": "2023/4/24",
      "lastModified": "2023/4/24 01:27"
    }
  ]
}